
Smart FAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000d80  00000e14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  00000e16  2**0
                  ALLOC
  3 .stab         00002100  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000646  00000000  00000000  00002f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003560  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cb8  00000000  00000000  000036a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004dc  00000000  00000000  00004358  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089d  00000000  00000000  00004834  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  000050d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000355  00000000  00000000  00005340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000879  00000000  00000000  00005695  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 37 03 	call	0x66e	; 0x66e <main>
  8a:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	51 f1       	breq	.+84     	; 0xea <DIO_vsetPINDir+0x58>
  96:	83 34       	cpi	r24, 0x43	; 67
  98:	20 f4       	brcc	.+8      	; 0xa2 <DIO_vsetPINDir+0x10>
  9a:	81 34       	cpi	r24, 0x41	; 65
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_vsetPINDir+0xe>
  9e:	7b c0       	rjmp	.+246    	; 0x196 <DIO_vsetPINDir+0x104>
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <DIO_vsetPINDir+0x1e>
  a2:	83 34       	cpi	r24, 0x43	; 67
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	3e c0       	rjmp	.+124    	; 0x124 <DIO_vsetPINDir+0x92>
  a8:	84 34       	cpi	r24, 0x44	; 68
  aa:	09 f0       	breq	.+2      	; 0xae <DIO_vsetPINDir+0x1c>
  ac:	74 c0       	rjmp	.+232    	; 0x196 <DIO_vsetPINDir+0x104>
  ae:	57 c0       	rjmp	.+174    	; 0x15e <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	69 f4       	brne	.+26     	; 0xce <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_vsetPINDir+0x30>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_vsetPINDir+0x2c>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	6a bb       	out	0x1a, r22	; 26
  cc:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac 01       	movw	r20, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPINDir+0x4a>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPINDir+0x46>
  e0:	ba 01       	movw	r22, r20
  e2:	60 95       	com	r22
  e4:	62 23       	and	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	69 f4       	brne	.+26     	; 0x108 <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vsetPINDir+0x6a>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vsetPINDir+0x66>
 100:	ba 01       	movw	r22, r20
 102:	62 2b       	or	r22, r18
 104:	67 bb       	out	0x17, r22	; 23
 106:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vsetPINDir+0x84>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vsetPINDir+0x80>
 11a:	ba 01       	movw	r22, r20
 11c:	60 95       	com	r22
 11e:	62 23       	and	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	69 f4       	brne	.+26     	; 0x142 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vsetPINDir+0xa4>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vsetPINDir+0xa0>
 13a:	ba 01       	movw	r22, r20
 13c:	62 2b       	or	r22, r18
 13e:	64 bb       	out	0x14, r22	; 20
 140:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 142:	24 b3       	in	r18, 0x14	; 20
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	ba 01       	movw	r22, r20
 156:	60 95       	com	r22
 158:	62 23       	and	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 15e:	41 30       	cpi	r20, 0x01	; 1
 160:	69 f4       	brne	.+26     	; 0x17c <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 162:	21 b3       	in	r18, 0x11	; 17
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ac 01       	movw	r20, r24
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_vsetPINDir+0xde>
 16c:	44 0f       	add	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_vsetPINDir+0xda>
 174:	ba 01       	movw	r22, r20
 176:	62 2b       	or	r22, r18
 178:	61 bb       	out	0x11, r22	; 17
 17a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 17c:	21 b3       	in	r18, 0x11	; 17
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vsetPINDir+0xf8>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vsetPINDir+0xf4>
 18e:	ba 01       	movw	r22, r20
 190:	60 95       	com	r22
 192:	62 23       	and	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret

00000198 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 198:	82 34       	cpi	r24, 0x42	; 66
 19a:	51 f1       	breq	.+84     	; 0x1f0 <DIO_write+0x58>
 19c:	83 34       	cpi	r24, 0x43	; 67
 19e:	20 f4       	brcc	.+8      	; 0x1a8 <DIO_write+0x10>
 1a0:	81 34       	cpi	r24, 0x41	; 65
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <DIO_write+0xe>
 1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_write+0x104>
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <DIO_write+0x1e>
 1a8:	83 34       	cpi	r24, 0x43	; 67
 1aa:	09 f4       	brne	.+2      	; 0x1ae <DIO_write+0x16>
 1ac:	3e c0       	rjmp	.+124    	; 0x22a <DIO_write+0x92>
 1ae:	84 34       	cpi	r24, 0x44	; 68
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_write+0x1c>
 1b2:	74 c0       	rjmp	.+232    	; 0x29c <DIO_write+0x104>
 1b4:	57 c0       	rjmp	.+174    	; 0x264 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 1b6:	41 30       	cpi	r20, 0x01	; 1
 1b8:	69 f4       	brne	.+26     	; 0x1d4 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1ba:	2b b3       	in	r18, 0x1b	; 27
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	ac 01       	movw	r20, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_write+0x30>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_write+0x2c>
 1cc:	ba 01       	movw	r22, r20
 1ce:	62 2b       	or	r22, r18
 1d0:	6b bb       	out	0x1b, r22	; 27
 1d2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1d4:	2b b3       	in	r18, 0x1b	; 27
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x4a>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x46>
 1e6:	ba 01       	movw	r22, r20
 1e8:	60 95       	com	r22
 1ea:	62 23       	and	r22, r18
 1ec:	6b bb       	out	0x1b, r22	; 27
 1ee:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	69 f4       	brne	.+26     	; 0x20e <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 1f4:	28 b3       	in	r18, 0x18	; 24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	ac 01       	movw	r20, r24
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_write+0x6a>
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_write+0x66>
 206:	ba 01       	movw	r22, r20
 208:	62 2b       	or	r22, r18
 20a:	68 bb       	out	0x18, r22	; 24
 20c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ac 01       	movw	r20, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_write+0x84>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_write+0x80>
 220:	ba 01       	movw	r22, r20
 222:	60 95       	com	r22
 224:	62 23       	and	r22, r18
 226:	68 bb       	out	0x18, r22	; 24
 228:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	69 f4       	brne	.+26     	; 0x248 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 22e:	25 b3       	in	r18, 0x15	; 21
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_write+0xa4>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_write+0xa0>
 240:	ba 01       	movw	r22, r20
 242:	62 2b       	or	r22, r18
 244:	65 bb       	out	0x15, r22	; 21
 246:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 248:	25 b3       	in	r18, 0x15	; 21
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	ac 01       	movw	r20, r24
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_write+0xbe>
 252:	44 0f       	add	r20, r20
 254:	55 1f       	adc	r21, r21
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_write+0xba>
 25a:	ba 01       	movw	r22, r20
 25c:	60 95       	com	r22
 25e:	62 23       	and	r22, r18
 260:	65 bb       	out	0x15, r22	; 21
 262:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	69 f4       	brne	.+26     	; 0x282 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 268:	22 b3       	in	r18, 0x12	; 18
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	ac 01       	movw	r20, r24
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_write+0xde>
 272:	44 0f       	add	r20, r20
 274:	55 1f       	adc	r21, r21
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_write+0xda>
 27a:	ba 01       	movw	r22, r20
 27c:	62 2b       	or	r22, r18
 27e:	62 bb       	out	0x12, r22	; 18
 280:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 282:	22 b3       	in	r18, 0x12	; 18
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	ac 01       	movw	r20, r24
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_write+0xf8>
 28c:	44 0f       	add	r20, r20
 28e:	55 1f       	adc	r21, r21
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_write+0xf4>
 294:	ba 01       	movw	r22, r20
 296:	60 95       	com	r22
 298:	62 23       	and	r22, r18
 29a:	62 bb       	out	0x12, r22	; 18
 29c:	08 95       	ret

0000029e <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 29e:	82 34       	cpi	r24, 0x42	; 66
 2a0:	f1 f0       	breq	.+60     	; 0x2de <DIO_u8read+0x40>
 2a2:	83 34       	cpi	r24, 0x43	; 67
 2a4:	20 f4       	brcc	.+8      	; 0x2ae <DIO_u8read+0x10>
 2a6:	81 34       	cpi	r24, 0x41	; 65
 2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_u8read+0xe>
 2aa:	4f c0       	rjmp	.+158    	; 0x34a <DIO_u8read+0xac>
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <DIO_u8read+0x1c>
 2ae:	83 34       	cpi	r24, 0x43	; 67
 2b0:	41 f1       	breq	.+80     	; 0x302 <DIO_u8read+0x64>
 2b2:	84 34       	cpi	r24, 0x44	; 68
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <DIO_u8read+0x1a>
 2b6:	49 c0       	rjmp	.+146    	; 0x34a <DIO_u8read+0xac>
 2b8:	36 c0       	rjmp	.+108    	; 0x326 <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 2ba:	29 b3       	in	r18, 0x19	; 25
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	06 2e       	mov	r0, r22
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8read+0x2a>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8read+0x26>
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	82 23       	and	r24, r18
 2d0:	93 23       	and	r25, r19
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8read+0x3a>
 2d4:	95 95       	asr	r25
 2d6:	87 95       	ror	r24
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8read+0x36>
		break;
 2dc:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 2de:	26 b3       	in	r18, 0x16	; 22
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	06 2e       	mov	r0, r22
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_u8read+0x4e>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_u8read+0x4a>
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	82 23       	and	r24, r18
 2f4:	93 23       	and	r25, r19
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_u8read+0x5e>
 2f8:	95 95       	asr	r25
 2fa:	87 95       	ror	r24
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_u8read+0x5a>
		break;
 300:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 302:	23 b3       	in	r18, 0x13	; 19
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	06 2e       	mov	r0, r22
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_u8read+0x72>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_u8read+0x6e>
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	82 23       	and	r24, r18
 318:	93 23       	and	r25, r19
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_u8read+0x82>
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_u8read+0x7e>
		break;
 324:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 326:	20 b3       	in	r18, 0x10	; 16
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	06 2e       	mov	r0, r22
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8read+0x96>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_u8read+0x92>
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	82 23       	and	r24, r18
 33c:	93 23       	and	r25, r19
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_u8read+0xa6>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_u8read+0xa2>
		break;
 348:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 34a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 34c:	08 95       	ret

0000034e <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 34e:	82 34       	cpi	r24, 0x42	; 66
 350:	b9 f0       	breq	.+46     	; 0x380 <DIO_toggle+0x32>
 352:	83 34       	cpi	r24, 0x43	; 67
 354:	18 f4       	brcc	.+6      	; 0x35c <DIO_toggle+0xe>
 356:	81 34       	cpi	r24, 0x41	; 65
 358:	c9 f5       	brne	.+114    	; 0x3cc <DIO_toggle+0x7e>
 35a:	05 c0       	rjmp	.+10     	; 0x366 <DIO_toggle+0x18>
 35c:	83 34       	cpi	r24, 0x43	; 67
 35e:	e9 f0       	breq	.+58     	; 0x39a <DIO_toggle+0x4c>
 360:	84 34       	cpi	r24, 0x44	; 68
 362:	a1 f5       	brne	.+104    	; 0x3cc <DIO_toggle+0x7e>
 364:	27 c0       	rjmp	.+78     	; 0x3b4 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 366:	2b b3       	in	r18, 0x1b	; 27
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	ac 01       	movw	r20, r24
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_toggle+0x26>
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_toggle+0x22>
 378:	ba 01       	movw	r22, r20
 37a:	62 27       	eor	r22, r18
 37c:	6b bb       	out	0x1b, r22	; 27
		break;
 37e:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 380:	28 b3       	in	r18, 0x18	; 24
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	ac 01       	movw	r20, r24
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_toggle+0x40>
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_toggle+0x3c>
 392:	ba 01       	movw	r22, r20
 394:	62 27       	eor	r22, r18
 396:	68 bb       	out	0x18, r22	; 24
		break;
 398:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 39a:	25 b3       	in	r18, 0x15	; 21
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	ac 01       	movw	r20, r24
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_toggle+0x5a>
 3a4:	44 0f       	add	r20, r20
 3a6:	55 1f       	adc	r21, r21
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_toggle+0x56>
 3ac:	ba 01       	movw	r22, r20
 3ae:	62 27       	eor	r22, r18
 3b0:	65 bb       	out	0x15, r22	; 21
		break;
 3b2:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 3b4:	22 b3       	in	r18, 0x12	; 18
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	ac 01       	movw	r20, r24
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_toggle+0x74>
 3be:	44 0f       	add	r20, r20
 3c0:	55 1f       	adc	r21, r21
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_toggle+0x70>
 3c6:	ba 01       	movw	r22, r20
 3c8:	62 27       	eor	r22, r18
 3ca:	62 bb       	out	0x12, r22	; 18
 3cc:	08 95       	ret

000003ce <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 3ce:	82 34       	cpi	r24, 0x42	; 66
 3d0:	61 f0       	breq	.+24     	; 0x3ea <DIO_set_port_direction+0x1c>
 3d2:	83 34       	cpi	r24, 0x43	; 67
 3d4:	18 f4       	brcc	.+6      	; 0x3dc <DIO_set_port_direction+0xe>
 3d6:	81 34       	cpi	r24, 0x41	; 65
 3d8:	69 f4       	brne	.+26     	; 0x3f4 <DIO_set_port_direction+0x26>
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <DIO_set_port_direction+0x18>
 3dc:	83 34       	cpi	r24, 0x43	; 67
 3de:	39 f0       	breq	.+14     	; 0x3ee <DIO_set_port_direction+0x20>
 3e0:	84 34       	cpi	r24, 0x44	; 68
 3e2:	41 f4       	brne	.+16     	; 0x3f4 <DIO_set_port_direction+0x26>
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 3e6:	6a bb       	out	0x1a, r22	; 26
		break ;
 3e8:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 3ea:	67 bb       	out	0x17, r22	; 23
		break ;
 3ec:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 3ee:	64 bb       	out	0x14, r22	; 20
		break ;
 3f0:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 3f2:	61 bb       	out	0x11, r22	; 17
 3f4:	08 95       	ret

000003f6 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 3f6:	82 34       	cpi	r24, 0x42	; 66
 3f8:	61 f0       	breq	.+24     	; 0x412 <DIO_write_port+0x1c>
 3fa:	83 34       	cpi	r24, 0x43	; 67
 3fc:	18 f4       	brcc	.+6      	; 0x404 <DIO_write_port+0xe>
 3fe:	81 34       	cpi	r24, 0x41	; 65
 400:	69 f4       	brne	.+26     	; 0x41c <DIO_write_port+0x26>
 402:	05 c0       	rjmp	.+10     	; 0x40e <DIO_write_port+0x18>
 404:	83 34       	cpi	r24, 0x43	; 67
 406:	39 f0       	breq	.+14     	; 0x416 <DIO_write_port+0x20>
 408:	84 34       	cpi	r24, 0x44	; 68
 40a:	41 f4       	brne	.+16     	; 0x41c <DIO_write_port+0x26>
 40c:	06 c0       	rjmp	.+12     	; 0x41a <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 40e:	6b bb       	out	0x1b, r22	; 27
		break ;
 410:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 412:	68 bb       	out	0x18, r22	; 24
		break ;
 414:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 416:	65 bb       	out	0x15, r22	; 21
		break ;
 418:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 41a:	62 bb       	out	0x12, r22	; 18
 41c:	08 95       	ret

0000041e <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 41e:	82 34       	cpi	r24, 0x42	; 66
 420:	61 f0       	breq	.+24     	; 0x43a <DIO_read_port+0x1c>
 422:	83 34       	cpi	r24, 0x43	; 67
 424:	18 f4       	brcc	.+6      	; 0x42c <DIO_read_port+0xe>
 426:	81 34       	cpi	r24, 0x41	; 65
 428:	71 f4       	brne	.+28     	; 0x446 <DIO_read_port+0x28>
 42a:	05 c0       	rjmp	.+10     	; 0x436 <DIO_read_port+0x18>
 42c:	83 34       	cpi	r24, 0x43	; 67
 42e:	39 f0       	breq	.+14     	; 0x43e <DIO_read_port+0x20>
 430:	84 34       	cpi	r24, 0x44	; 68
 432:	49 f4       	brne	.+18     	; 0x446 <DIO_read_port+0x28>
 434:	06 c0       	rjmp	.+12     	; 0x442 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 436:	89 b3       	in	r24, 0x19	; 25
		break ;
 438:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
 43a:	86 b3       	in	r24, 0x16	; 22
		break ;
 43c:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 43e:	83 b3       	in	r24, 0x13	; 19
		break ;
 440:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 442:	80 b3       	in	r24, 0x10	; 16
		break ;
 444:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 446:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
 448:	08 95       	ret

0000044a <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 44a:	82 34       	cpi	r24, 0x42	; 66
 44c:	51 f1       	breq	.+84     	; 0x4a2 <DIO_vconnectpullup+0x58>
 44e:	83 34       	cpi	r24, 0x43	; 67
 450:	20 f4       	brcc	.+8      	; 0x45a <DIO_vconnectpullup+0x10>
 452:	81 34       	cpi	r24, 0x41	; 65
 454:	09 f0       	breq	.+2      	; 0x458 <DIO_vconnectpullup+0xe>
 456:	7b c0       	rjmp	.+246    	; 0x54e <DIO_vconnectpullup+0x104>
 458:	07 c0       	rjmp	.+14     	; 0x468 <DIO_vconnectpullup+0x1e>
 45a:	83 34       	cpi	r24, 0x43	; 67
 45c:	09 f4       	brne	.+2      	; 0x460 <DIO_vconnectpullup+0x16>
 45e:	3e c0       	rjmp	.+124    	; 0x4dc <DIO_vconnectpullup+0x92>
 460:	84 34       	cpi	r24, 0x44	; 68
 462:	09 f0       	breq	.+2      	; 0x466 <DIO_vconnectpullup+0x1c>
 464:	74 c0       	rjmp	.+232    	; 0x54e <DIO_vconnectpullup+0x104>
 466:	57 c0       	rjmp	.+174    	; 0x516 <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	69 f4       	brne	.+26     	; 0x486 <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 46c:	2b b3       	in	r18, 0x1b	; 27
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	ac 01       	movw	r20, r24
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_vconnectpullup+0x30>
 476:	44 0f       	add	r20, r20
 478:	55 1f       	adc	r21, r21
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_vconnectpullup+0x2c>
 47e:	ba 01       	movw	r22, r20
 480:	62 2b       	or	r22, r18
 482:	6b bb       	out	0x1b, r22	; 27
 484:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 486:	2b b3       	in	r18, 0x1b	; 27
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	ac 01       	movw	r20, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_vconnectpullup+0x4a>
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_vconnectpullup+0x46>
 498:	ba 01       	movw	r22, r20
 49a:	60 95       	com	r22
 49c:	62 23       	and	r22, r18
 49e:	6b bb       	out	0x1b, r22	; 27
 4a0:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 4a2:	41 30       	cpi	r20, 0x01	; 1
 4a4:	69 f4       	brne	.+26     	; 0x4c0 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 4a6:	28 b3       	in	r18, 0x18	; 24
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	ac 01       	movw	r20, r24
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_vconnectpullup+0x6a>
 4b0:	44 0f       	add	r20, r20
 4b2:	55 1f       	adc	r21, r21
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_vconnectpullup+0x66>
 4b8:	ba 01       	movw	r22, r20
 4ba:	62 2b       	or	r22, r18
 4bc:	68 bb       	out	0x18, r22	; 24
 4be:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 4c0:	28 b3       	in	r18, 0x18	; 24
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	ac 01       	movw	r20, r24
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_vconnectpullup+0x84>
 4ca:	44 0f       	add	r20, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_vconnectpullup+0x80>
 4d2:	ba 01       	movw	r22, r20
 4d4:	60 95       	com	r22
 4d6:	62 23       	and	r22, r18
 4d8:	68 bb       	out	0x18, r22	; 24
 4da:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
 4dc:	41 30       	cpi	r20, 0x01	; 1
 4de:	69 f4       	brne	.+26     	; 0x4fa <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
 4e0:	25 b3       	in	r18, 0x15	; 21
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	ac 01       	movw	r20, r24
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_vconnectpullup+0xa4>
 4ea:	44 0f       	add	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_vconnectpullup+0xa0>
 4f2:	ba 01       	movw	r22, r20
 4f4:	62 2b       	or	r22, r18
 4f6:	65 bb       	out	0x15, r22	; 21
 4f8:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 4fa:	25 b3       	in	r18, 0x15	; 21
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	ac 01       	movw	r20, r24
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_vconnectpullup+0xbe>
 504:	44 0f       	add	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_vconnectpullup+0xba>
 50c:	ba 01       	movw	r22, r20
 50e:	60 95       	com	r22
 510:	62 23       	and	r22, r18
 512:	65 bb       	out	0x15, r22	; 21
 514:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
 516:	41 30       	cpi	r20, 0x01	; 1
 518:	69 f4       	brne	.+26     	; 0x534 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
 51a:	22 b3       	in	r18, 0x12	; 18
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	ac 01       	movw	r20, r24
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_vconnectpullup+0xde>
 524:	44 0f       	add	r20, r20
 526:	55 1f       	adc	r21, r21
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_vconnectpullup+0xda>
 52c:	ba 01       	movw	r22, r20
 52e:	62 2b       	or	r22, r18
 530:	62 bb       	out	0x12, r22	; 18
 532:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 534:	22 b3       	in	r18, 0x12	; 18
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	ac 01       	movw	r20, r24
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_vconnectpullup+0xf8>
 53e:	44 0f       	add	r20, r20
 540:	55 1f       	adc	r21, r21
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_vconnectpullup+0xf4>
 546:	ba 01       	movw	r22, r20
 548:	60 95       	com	r22
 54a:	62 23       	and	r22, r18
 54c:	62 bb       	out	0x12, r22	; 18
 54e:	08 95       	ret

00000550 <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
 550:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 552:	82 34       	cpi	r24, 0x42	; 66
 554:	81 f0       	breq	.+32     	; 0x576 <write_low_nibble+0x26>
 556:	83 34       	cpi	r24, 0x43	; 67
 558:	18 f4       	brcc	.+6      	; 0x560 <write_low_nibble+0x10>
 55a:	81 34       	cpi	r24, 0x41	; 65
 55c:	f1 f4       	brne	.+60     	; 0x59a <write_low_nibble+0x4a>
 55e:	05 c0       	rjmp	.+10     	; 0x56a <write_low_nibble+0x1a>
 560:	83 34       	cpi	r24, 0x43	; 67
 562:	79 f0       	breq	.+30     	; 0x582 <write_low_nibble+0x32>
 564:	84 34       	cpi	r24, 0x44	; 68
 566:	c9 f4       	brne	.+50     	; 0x59a <write_low_nibble+0x4a>
 568:	12 c0       	rjmp	.+36     	; 0x58e <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
 56a:	8b b3       	in	r24, 0x1b	; 27
 56c:	80 7f       	andi	r24, 0xF0	; 240
 56e:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 570:	8b b3       	in	r24, 0x1b	; 27
 572:	86 2b       	or	r24, r22
 574:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
 576:	88 b3       	in	r24, 0x18	; 24
 578:	80 7f       	andi	r24, 0xF0	; 240
 57a:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 57c:	88 b3       	in	r24, 0x18	; 24
 57e:	86 2b       	or	r24, r22
 580:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
 582:	85 b3       	in	r24, 0x15	; 21
 584:	80 7f       	andi	r24, 0xF0	; 240
 586:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 588:	85 b3       	in	r24, 0x15	; 21
 58a:	86 2b       	or	r24, r22
 58c:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
 58e:	82 b3       	in	r24, 0x12	; 18
 590:	80 7f       	andi	r24, 0xF0	; 240
 592:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 594:	82 b3       	in	r24, 0x12	; 18
 596:	68 2b       	or	r22, r24
 598:	62 bb       	out	0x12, r22	; 18
 59a:	08 95       	ret

0000059c <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 59c:	62 95       	swap	r22
 59e:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 5a0:	82 34       	cpi	r24, 0x42	; 66
 5a2:	81 f0       	breq	.+32     	; 0x5c4 <write_high_nibble+0x28>
 5a4:	83 34       	cpi	r24, 0x43	; 67
 5a6:	18 f4       	brcc	.+6      	; 0x5ae <write_high_nibble+0x12>
 5a8:	81 34       	cpi	r24, 0x41	; 65
 5aa:	f1 f4       	brne	.+60     	; 0x5e8 <write_high_nibble+0x4c>
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <write_high_nibble+0x1c>
 5ae:	83 34       	cpi	r24, 0x43	; 67
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <write_high_nibble+0x34>
 5b2:	84 34       	cpi	r24, 0x44	; 68
 5b4:	c9 f4       	brne	.+50     	; 0x5e8 <write_high_nibble+0x4c>
 5b6:	12 c0       	rjmp	.+36     	; 0x5dc <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
 5b8:	8b b3       	in	r24, 0x1b	; 27
 5ba:	8f 70       	andi	r24, 0x0F	; 15
 5bc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 5be:	8b b3       	in	r24, 0x1b	; 27
 5c0:	86 2b       	or	r24, r22
 5c2:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 5c4:	88 b3       	in	r24, 0x18	; 24
 5c6:	8f 70       	andi	r24, 0x0F	; 15
 5c8:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 5ca:	88 b3       	in	r24, 0x18	; 24
 5cc:	86 2b       	or	r24, r22
 5ce:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 5d0:	85 b3       	in	r24, 0x15	; 21
 5d2:	8f 70       	andi	r24, 0x0F	; 15
 5d4:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 5d6:	85 b3       	in	r24, 0x15	; 21
 5d8:	86 2b       	or	r24, r22
 5da:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 5dc:	82 b3       	in	r24, 0x12	; 18
 5de:	8f 70       	andi	r24, 0x0F	; 15
 5e0:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 5e2:	82 b3       	in	r24, 0x12	; 18
 5e4:	68 2b       	or	r22, r24
 5e6:	62 bb       	out	0x12, r22	; 18
 5e8:	08 95       	ret

000005ea <motor_init>:

#include "COMMON.h"

void motor_init(char portname,unsigned char pinnumber1)
{
	DIO_vsetPINDir(portname,pinnumber1,OUTPUT);
 5ea:	41 e0       	ldi	r20, 0x01	; 1
 5ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
}
 5f0:	08 95       	ret

000005f2 <motor_ON>:
void motor_ON(char portname,unsigned char pinnumber1,unsigned char speed)
{
    timer1_wave_fastPWM(speed * 1.95,DC_MOTOR);
 5f2:	64 2f       	mov	r22, r20
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__floatsisf>
 5fe:	2a e9       	ldi	r18, 0x9A	; 154
 600:	39 e9       	ldi	r19, 0x99	; 153
 602:	49 ef       	ldi	r20, 0xF9	; 249
 604:	5f e3       	ldi	r21, 0x3F	; 63
 606:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsf3>
 60a:	44 e4       	ldi	r20, 0x44	; 68
 60c:	0e 94 1e 04 	call	0x83c	; 0x83c <timer1_wave_fastPWM>
}
 610:	08 95       	ret

00000612 <motor_OFF>:
void motor_OFF()
{
    timer1_wave_fastPWM(0,DC_MOTOR);
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	cb 01       	movw	r24, r22
 618:	44 e4       	ldi	r20, 0x44	; 68
 61a:	0e 94 1e 04 	call	0x83c	; 0x83c <timer1_wave_fastPWM>
	DIO_write('D',4,LOW);
 61e:	84 e4       	ldi	r24, 0x44	; 68
 620:	64 e0       	ldi	r22, 0x04	; 4
 622:	40 e0       	ldi	r20, 0x00	; 0
 624:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
}
 628:	08 95       	ret

0000062a <servomotor_init>:

#include "COMMON.h"

void servomotor_init(char portname,unsigned char pinumber)
{
	DIO_vsetPINDir(portname,pinumber,1);
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
}
 630:	08 95       	ret

00000632 <servomotor_rot>:
void servomotor_rot(signed char degree)
{
		timer1_wave_fastPWM(1 + ((float)degree/90) * 0.5,SERVO_MOTOR);
 632:	68 2f       	mov	r22, r24
 634:	77 27       	eor	r23, r23
 636:	67 fd       	sbrc	r22, 7
 638:	70 95       	com	r23
 63a:	87 2f       	mov	r24, r23
 63c:	97 2f       	mov	r25, r23
 63e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__floatsisf>
 642:	20 e0       	ldi	r18, 0x00	; 0
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	44 eb       	ldi	r20, 0xB4	; 180
 648:	52 e4       	ldi	r21, 0x42	; 66
 64a:	0e 94 17 05 	call	0xa2e	; 0xa2e <__divsf3>
 64e:	20 e0       	ldi	r18, 0x00	; 0
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	40 e0       	ldi	r20, 0x00	; 0
 654:	5f e3       	ldi	r21, 0x3F	; 63
 656:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsf3>
 65a:	20 e0       	ldi	r18, 0x00	; 0
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	40 e8       	ldi	r20, 0x80	; 128
 660:	5f e3       	ldi	r21, 0x3F	; 63
 662:	0e 94 b3 04 	call	0x966	; 0x966 <__addsf3>
 666:	43 e5       	ldi	r20, 0x53	; 83
 668:	0e 94 1e 04 	call	0x83c	; 0x83c <timer1_wave_fastPWM>
}
 66c:	08 95       	ret

0000066e <main>:
volatile char choice;

void main(void)
{
	signed char degree = 0;
	motor_init('C',PINC0);
 66e:	83 e4       	ldi	r24, 0x43	; 67
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	0e 94 f5 02 	call	0x5ea	; 0x5ea <motor_init>
	servomotor_init('D',5);
 676:	84 e4       	ldi	r24, 0x44	; 68
 678:	65 e0       	ldi	r22, 0x05	; 5
 67a:	0e 94 15 03 	call	0x62a	; 0x62a <servomotor_init>
	UART_vInit(9600);
 67e:	60 e8       	ldi	r22, 0x80	; 128
 680:	75 e2       	ldi	r23, 0x25	; 37
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 6f 04 	call	0x8de	; 0x8de <UART_vInit>
    UART_RECEIVE_INTERRUPT_ENABLE();
 68a:	0e 94 92 04 	call	0x924	; 0x924 <UART_RECEIVE_INTERRUPT_ENABLE>
degree = MAXNEGDEGREE;
 68e:	c6 ea       	ldi	r28, 0xA6	; 166
 690:	0a c0       	rjmp	.+20     	; 0x6a6 <main+0x38>
	
	while(1)
	{
		for(; degree < MAXPOSDEGREE && DC_MOTOR_ON == dcmotor && ROTATE_ON == rotate;degree++)
		{
			servomotor_rot(degree);
 692:	8c 2f       	mov	r24, r28
 694:	0e 94 19 03 	call	0x632	; 0x632 <servomotor_rot>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 698:	8f e3       	ldi	r24, 0x3F	; 63
 69a:	9c e9       	ldi	r25, 0x9C	; 156
 69c:	01 97       	sbiw	r24, 0x01	; 1
 69e:	f1 f7       	brne	.-4      	; 0x69c <main+0x2e>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <main+0x34>
 6a2:	00 00       	nop
    UART_RECEIVE_INTERRUPT_ENABLE();
degree = MAXNEGDEGREE;
	
	while(1)
	{
		for(; degree < MAXPOSDEGREE && DC_MOTOR_ON == dcmotor && ROTATE_ON == rotate;degree++)
 6a4:	cf 5f       	subi	r28, 0xFF	; 255
 6a6:	ca 35       	cpi	r28, 0x5A	; 90
 6a8:	44 f4       	brge	.+16     	; 0x6ba <main+0x4c>
 6aa:	80 91 61 00 	lds	r24, 0x0061
 6ae:	81 33       	cpi	r24, 0x31	; 49
 6b0:	21 f4       	brne	.+8      	; 0x6ba <main+0x4c>
 6b2:	80 91 60 00 	lds	r24, 0x0060
 6b6:	83 33       	cpi	r24, 0x33	; 51
 6b8:	61 f3       	breq	.-40     	; 0x692 <main+0x24>
		{
			servomotor_rot(degree);
			_delay_ms(20);
		} 
		for(; degree > MAXNEGDEGREE && DC_MOTOR_ON == dcmotor && ROTATE_ON == rotate;degree--)
 6ba:	c7 3a       	cpi	r28, 0xA7	; 167
 6bc:	a4 f3       	brlt	.-24     	; 0x6a6 <main+0x38>
 6be:	80 91 61 00 	lds	r24, 0x0061
 6c2:	81 33       	cpi	r24, 0x31	; 49
 6c4:	81 f7       	brne	.-32     	; 0x6a6 <main+0x38>
 6c6:	80 91 60 00 	lds	r24, 0x0060
 6ca:	83 33       	cpi	r24, 0x33	; 51
 6cc:	61 f7       	brne	.-40     	; 0x6a6 <main+0x38>
		{
			servomotor_rot(degree);
 6ce:	8c 2f       	mov	r24, r28
 6d0:	0e 94 19 03 	call	0x632	; 0x632 <servomotor_rot>
 6d4:	8f e3       	ldi	r24, 0x3F	; 63
 6d6:	9c e9       	ldi	r25, 0x9C	; 156
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <main+0x6a>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <main+0x70>
 6de:	00 00       	nop
		for(; degree < MAXPOSDEGREE && DC_MOTOR_ON == dcmotor && ROTATE_ON == rotate;degree++)
		{
			servomotor_rot(degree);
			_delay_ms(20);
		} 
		for(; degree > MAXNEGDEGREE && DC_MOTOR_ON == dcmotor && ROTATE_ON == rotate;degree--)
 6e0:	c1 50       	subi	r28, 0x01	; 1
 6e2:	c6 3a       	cpi	r28, 0xA6	; 166
 6e4:	01 f3       	breq	.-64     	; 0x6a6 <main+0x38>
 6e6:	80 91 61 00 	lds	r24, 0x0061
 6ea:	81 33       	cpi	r24, 0x31	; 49
 6ec:	e1 f6       	brne	.-72     	; 0x6a6 <main+0x38>
 6ee:	80 91 60 00 	lds	r24, 0x0060
 6f2:	83 33       	cpi	r24, 0x33	; 51
 6f4:	61 f3       	breq	.-40     	; 0x6ce <main+0x60>
 6f6:	d7 cf       	rjmp	.-82     	; 0x6a6 <main+0x38>

000006f8 <__vector_13>:
		}
	}
}

ISR(USART_RXC_vect)
{
 6f8:	1f 92       	push	r1
 6fa:	0f 92       	push	r0
 6fc:	0f b6       	in	r0, 0x3f	; 63
 6fe:	0f 92       	push	r0
 700:	11 24       	eor	r1, r1
 702:	2f 93       	push	r18
 704:	3f 93       	push	r19
 706:	4f 93       	push	r20
 708:	5f 93       	push	r21
 70a:	6f 93       	push	r22
 70c:	7f 93       	push	r23
 70e:	8f 93       	push	r24
 710:	9f 93       	push	r25
 712:	af 93       	push	r26
 714:	bf 93       	push	r27
 716:	ef 93       	push	r30
 718:	ff 93       	push	r31
	choice = UART_u8ReceiveData();
 71a:	0e 94 99 04 	call	0x932	; 0x932 <UART_u8ReceiveData>
 71e:	80 93 62 00 	sts	0x0062, r24
	if(ROTATE_ON == choice)
 722:	80 91 62 00 	lds	r24, 0x0062
 726:	83 33       	cpi	r24, 0x33	; 51
 728:	19 f4       	brne	.+6      	; 0x730 <__vector_13+0x38>
	{
		rotate = ROTATE_ON;
 72a:	80 93 60 00 	sts	0x0060, r24
 72e:	55 c0       	rjmp	.+170    	; 0x7da <__vector_13+0xe2>
	}
	else if(ROTATE_OFF == choice)
 730:	80 91 62 00 	lds	r24, 0x0062
 734:	82 33       	cpi	r24, 0x32	; 50
 736:	19 f4       	brne	.+6      	; 0x73e <__vector_13+0x46>
	{
		rotate = ROTATE_OFF;
 738:	80 93 60 00 	sts	0x0060, r24
 73c:	4e c0       	rjmp	.+156    	; 0x7da <__vector_13+0xe2>
	}
	else if(DC_MOTOR_ON == choice)
 73e:	80 91 62 00 	lds	r24, 0x0062
 742:	81 33       	cpi	r24, 0x31	; 49
 744:	49 f4       	brne	.+18     	; 0x758 <__vector_13+0x60>
	{
		motor_ON('D',PINC4,MOTOR_SPEED1);
 746:	84 e4       	ldi	r24, 0x44	; 68
 748:	64 e0       	ldi	r22, 0x04	; 4
 74a:	44 e0       	ldi	r20, 0x04	; 4
 74c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <motor_ON>
		dcmotor = DC_MOTOR_ON;
 750:	81 e3       	ldi	r24, 0x31	; 49
 752:	80 93 61 00 	sts	0x0061, r24
 756:	41 c0       	rjmp	.+130    	; 0x7da <__vector_13+0xe2>
	}
	else if(DC_MOTOR_OFF == choice)
 758:	80 91 62 00 	lds	r24, 0x0062
 75c:	80 33       	cpi	r24, 0x30	; 48
 75e:	51 f4       	brne	.+20     	; 0x774 <__vector_13+0x7c>
	{
		motor_OFF('C',PINC0);
 760:	83 e4       	ldi	r24, 0x43	; 67
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	0e 94 09 03 	call	0x612	; 0x612 <motor_OFF>
		dcmotor = DC_MOTOR_OFF;
 76c:	80 e3       	ldi	r24, 0x30	; 48
 76e:	80 93 61 00 	sts	0x0061, r24
 772:	33 c0       	rjmp	.+102    	; 0x7da <__vector_13+0xe2>
	}
    else if(SPEED1 == choice)
 774:	80 91 62 00 	lds	r24, 0x0062
 778:	84 33       	cpi	r24, 0x34	; 52
 77a:	49 f4       	brne	.+18     	; 0x78e <__vector_13+0x96>
	{
		motor_ON('D',PINC4,MOTOR_SPEED1);
 77c:	84 e4       	ldi	r24, 0x44	; 68
 77e:	64 e0       	ldi	r22, 0x04	; 4
 780:	44 e0       	ldi	r20, 0x04	; 4
 782:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <motor_ON>
		dcmotor = DC_MOTOR_ON;
 786:	81 e3       	ldi	r24, 0x31	; 49
 788:	80 93 61 00 	sts	0x0061, r24
 78c:	26 c0       	rjmp	.+76     	; 0x7da <__vector_13+0xe2>
	}
	else if(SPEED2 == choice)
 78e:	80 91 62 00 	lds	r24, 0x0062
 792:	85 33       	cpi	r24, 0x35	; 53
 794:	49 f4       	brne	.+18     	; 0x7a8 <__vector_13+0xb0>
	{
		motor_ON('D',PINC4,MOTOR_SPEED2);
 796:	84 e4       	ldi	r24, 0x44	; 68
 798:	64 e0       	ldi	r22, 0x04	; 4
 79a:	45 e0       	ldi	r20, 0x05	; 5
 79c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <motor_ON>
		dcmotor = DC_MOTOR_ON;
 7a0:	81 e3       	ldi	r24, 0x31	; 49
 7a2:	80 93 61 00 	sts	0x0061, r24
 7a6:	19 c0       	rjmp	.+50     	; 0x7da <__vector_13+0xe2>
	}
    else if(SPEED3 == choice)
 7a8:	80 91 62 00 	lds	r24, 0x0062
 7ac:	86 33       	cpi	r24, 0x36	; 54
 7ae:	49 f4       	brne	.+18     	; 0x7c2 <__vector_13+0xca>
	{
		motor_ON('D',PINC4,MOTOR_SPEED3);
 7b0:	84 e4       	ldi	r24, 0x44	; 68
 7b2:	64 e0       	ldi	r22, 0x04	; 4
 7b4:	46 e0       	ldi	r20, 0x06	; 6
 7b6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <motor_ON>
		dcmotor = DC_MOTOR_ON;
 7ba:	81 e3       	ldi	r24, 0x31	; 49
 7bc:	80 93 61 00 	sts	0x0061, r24
 7c0:	0c c0       	rjmp	.+24     	; 0x7da <__vector_13+0xe2>
	}
    else if(SPEED4 == choice)
 7c2:	80 91 62 00 	lds	r24, 0x0062
 7c6:	87 33       	cpi	r24, 0x37	; 55
 7c8:	41 f4       	brne	.+16     	; 0x7da <__vector_13+0xe2>
	{
		motor_ON('D',PINC4,MOTOR_SPEED4);
 7ca:	84 e4       	ldi	r24, 0x44	; 68
 7cc:	64 e0       	ldi	r22, 0x04	; 4
 7ce:	47 e0       	ldi	r20, 0x07	; 7
 7d0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <motor_ON>
		dcmotor = DC_MOTOR_ON;
 7d4:	81 e3       	ldi	r24, 0x31	; 49
 7d6:	80 93 61 00 	sts	0x0061, r24
	}
	
}
 7da:	ff 91       	pop	r31
 7dc:	ef 91       	pop	r30
 7de:	bf 91       	pop	r27
 7e0:	af 91       	pop	r26
 7e2:	9f 91       	pop	r25
 7e4:	8f 91       	pop	r24
 7e6:	7f 91       	pop	r23
 7e8:	6f 91       	pop	r22
 7ea:	5f 91       	pop	r21
 7ec:	4f 91       	pop	r20
 7ee:	3f 91       	pop	r19
 7f0:	2f 91       	pop	r18
 7f2:	0f 90       	pop	r0
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	0f 90       	pop	r0
 7f8:	1f 90       	pop	r1
 7fa:	18 95       	reti

000007fc <timer_CTC_init_interrupt>:
#include "COMMON.h"

void timer_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
 7fc:	83 b7       	in	r24, 0x33	; 51
 7fe:	88 60       	ori	r24, 0x08	; 8
 800:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=80;
 802:	80 e5       	ldi	r24, 0x50	; 80
 804:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
 806:	83 b7       	in	r24, 0x33	; 51
 808:	81 60       	ori	r24, 0x01	; 1
 80a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 80c:	83 b7       	in	r24, 0x33	; 51
 80e:	84 60       	ori	r24, 0x04	; 4
 810:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	sei();
 812:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 814:	89 b7       	in	r24, 0x39	; 57
 816:	82 60       	ori	r24, 0x02	; 2
 818:	89 bf       	out	0x39, r24	; 57
}
 81a:	08 95       	ret

0000081c <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,PINB3);
 81c:	bb 9a       	sbi	0x17, 3	; 23
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
 81e:	83 b7       	in	r24, 0x33	; 51
 820:	88 60       	ori	r24, 0x08	; 8
 822:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
 824:	80 e4       	ldi	r24, 0x40	; 64
 826:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 828:	83 b7       	in	r24, 0x33	; 51
 82a:	81 60       	ori	r24, 0x01	; 1
 82c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 82e:	83 b7       	in	r24, 0x33	; 51
 830:	84 60       	ori	r24, 0x04	; 4
 832:	83 bf       	out	0x33, r24	; 51
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
 834:	83 b7       	in	r24, 0x33	; 51
 836:	80 61       	ori	r24, 0x10	; 16
 838:	83 bf       	out	0x33, r24	; 51
}
 83a:	08 95       	ret

0000083c <timer1_wave_fastPWM>:

void timer1_wave_fastPWM(double value,unsigned char motor)
{
	/* set OC1A as output pin */
	SET_BIT(DDRD,PIND5);
 83c:	8d 9a       	sbi	0x11, 5	; 17
    SET_BIT(DDRD,PIND4);
 83e:	8c 9a       	sbi	0x11, 4	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
 840:	2f b5       	in	r18, 0x2f	; 47
 842:	22 60       	ori	r18, 0x02	; 2
 844:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 846:	2e b5       	in	r18, 0x2e	; 46
 848:	28 60       	ori	r18, 0x08	; 8
 84a:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 84c:	2e b5       	in	r18, 0x2e	; 46
 84e:	20 61       	ori	r18, 0x10	; 16
 850:	2e bd       	out	0x2e, r18	; 46
switch (motor)
 852:	44 34       	cpi	r20, 0x44	; 68
 854:	19 f0       	breq	.+6      	; 0x85c <timer1_wave_fastPWM+0x20>
 856:	43 35       	cpi	r20, 0x53	; 83
 858:	71 f5       	brne	.+92     	; 0x8b6 <__stack+0x57>
 85a:	17 c0       	rjmp	.+46     	; 0x88a <__stack+0x2b>
{
case DC_MOTOR :
OCR1B=value*1000;
 85c:	20 e0       	ldi	r18, 0x00	; 0
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	4a e7       	ldi	r20, 0x7A	; 122
 862:	54 e4       	ldi	r21, 0x44	; 68
 864:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsf3>
 868:	0e 94 7f 05 	call	0xafe	; 0xafe <__fixunssfsi>
 86c:	dc 01       	movw	r26, r24
 86e:	cb 01       	movw	r24, r22
 870:	99 bd       	out	0x29, r25	; 41
 872:	88 bd       	out	0x28, r24	; 40
ICR1=19999;
 874:	8f e1       	ldi	r24, 0x1F	; 31
 876:	9e e4       	ldi	r25, 0x4E	; 78
 878:	97 bd       	out	0x27, r25	; 39
 87a:	86 bd       	out	0x26, r24	; 38
/* select timer clock, prescaler 8 */
SET_BIT(TCCR1B,CS11);
 87c:	8e b5       	in	r24, 0x2e	; 46
 87e:	82 60       	ori	r24, 0x02	; 2
 880:	8e bd       	out	0x2e, r24	; 46
/* clear OC1B on compare match, set OC1B at BOTTOM,(non inverting mode)*/
SET_BIT(TCCR1A,COM1B1);
 882:	8f b5       	in	r24, 0x2f	; 47
 884:	80 62       	ori	r24, 0x20	; 32
 886:	8f bd       	out	0x2f, r24	; 47
break;
 888:	08 95       	ret
case SERVO_MOTOR:
/* load a value in OCR1A,ICR1 */
OCR1A=value*1000;
 88a:	20 e0       	ldi	r18, 0x00	; 0
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	4a e7       	ldi	r20, 0x7A	; 122
 890:	54 e4       	ldi	r21, 0x44	; 68
 892:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsf3>
 896:	0e 94 7f 05 	call	0xafe	; 0xafe <__fixunssfsi>
 89a:	dc 01       	movw	r26, r24
 89c:	cb 01       	movw	r24, r22
 89e:	9b bd       	out	0x2b, r25	; 43
 8a0:	8a bd       	out	0x2a, r24	; 42
ICR1=19999;
 8a2:	8f e1       	ldi	r24, 0x1F	; 31
 8a4:	9e e4       	ldi	r25, 0x4E	; 78
 8a6:	97 bd       	out	0x27, r25	; 39
 8a8:	86 bd       	out	0x26, r24	; 38
/* select timer clock, prescaler 8 */
SET_BIT(TCCR1B,CS11);
 8aa:	8e b5       	in	r24, 0x2e	; 46
 8ac:	82 60       	ori	r24, 0x02	; 2
 8ae:	8e bd       	out	0x2e, r24	; 46
/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
SET_BIT(TCCR1A,COM1A1);
 8b0:	8f b5       	in	r24, 0x2f	; 47
 8b2:	80 68       	ori	r24, 0x80	; 128
 8b4:	8f bd       	out	0x2f, r24	; 47
 8b6:	08 95       	ret

000008b8 <timer_wave_phasecorrectPWM>:
}

void timer_wave_phasecorrectPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 8b8:	bb 9a       	sbi	0x17, 3	; 23
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
 8ba:	83 b7       	in	r24, 0x33	; 51
 8bc:	80 64       	ori	r24, 0x40	; 64
 8be:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
 8c0:	80 e4       	ldi	r24, 0x40	; 64
 8c2:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 8c4:	83 b7       	in	r24, 0x33	; 51
 8c6:	81 60       	ori	r24, 0x01	; 1
 8c8:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 8ca:	83 b7       	in	r24, 0x33	; 51
 8cc:	84 60       	ori	r24, 0x04	; 4
 8ce:	83 bf       	out	0x33, r24	; 51
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
 8d0:	83 b7       	in	r24, 0x33	; 51
 8d2:	80 61       	ori	r24, 0x10	; 16
 8d4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
 8d6:	83 b7       	in	r24, 0x33	; 51
 8d8:	80 62       	ori	r24, 0x20	; 32
 8da:	83 bf       	out	0x33, r24	; 51
}
 8dc:	08 95       	ret

000008de <UART_vInit>:
 */ 

#include "COMMON.h"

void UART_vInit(unsigned long baud)
{
 8de:	dc 01       	movw	r26, r24
 8e0:	cb 01       	movw	r24, r22
	/*1 - Choose baud rate that will be used by sender and receiver by writing to UBRRL/UBRRH*/
	unsigned short UBRR ;
	UBRR=(F_CPU/(16*baud))-1 ;
 8e2:	88 0f       	add	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	aa 1f       	adc	r26, r26
 8e8:	bb 1f       	adc	r27, r27
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	aa 1f       	adc	r26, r26
 8f0:	bb 1f       	adc	r27, r27
 8f2:	9c 01       	movw	r18, r24
 8f4:	ad 01       	movw	r20, r26
 8f6:	22 0f       	add	r18, r18
 8f8:	33 1f       	adc	r19, r19
 8fa:	44 1f       	adc	r20, r20
 8fc:	55 1f       	adc	r21, r21
 8fe:	22 0f       	add	r18, r18
 900:	33 1f       	adc	r19, r19
 902:	44 1f       	adc	r20, r20
 904:	55 1f       	adc	r21, r21
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	72 e1       	ldi	r23, 0x12	; 18
 90a:	8a e7       	ldi	r24, 0x7A	; 122
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__udivmodsi4>
 912:	21 50       	subi	r18, 0x01	; 1
 914:	30 40       	sbci	r19, 0x00	; 0
	UBRRH=(unsigned char)(UBRR>>8);
 916:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)UBRR;
 918:	29 b9       	out	0x09, r18	; 9
	/*2 - Enable USART Sender & Receiver*/
	SET_BIT(UCSRB,TXEN);
 91a:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);
 91c:	54 9a       	sbi	0x0a, 4	; 10
	/*3 - Choose number of data bits to be sent,parity and stop bits from UCSRC
	, We will work with 8 bits data,1 stop bit and no parity bits*/
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 91e:	86 e8       	ldi	r24, 0x86	; 134
 920:	80 bd       	out	0x20, r24	; 32
}
 922:	08 95       	ret

00000924 <UART_RECEIVE_INTERRUPT_ENABLE>:
void UART_RECEIVE_INTERRUPT_ENABLE()
{   sei();
 924:	78 94       	sei
	SET_BIT(UCSRB,RXCIE);
 926:	57 9a       	sbi	0x0a, 7	; 10
}
 928:	08 95       	ret

0000092a <UART_vSendData>:

void UART_vSendData(char data)
{
	/*Wait for UDR transmit buffer to be empty*/
	while(READ_BIT(UCSRA,UDRE)==0);
 92a:	5d 9b       	sbis	0x0b, 5	; 11
 92c:	fe cf       	rjmp	.-4      	; 0x92a <UART_vSendData>
	/*Put data to UDR transmit buffer transmit*/
	UDR=data ;
 92e:	8c b9       	out	0x0c, r24	; 12
}
 930:	08 95       	ret

00000932 <UART_u8ReceiveData>:

char UART_u8ReceiveData(void)
{
	/*Wait for UDR receive buffer to be filled with data*/
	while(READ_BIT(UCSRA,RXC)==0);
 932:	5f 9b       	sbis	0x0b, 7	; 11
 934:	fe cf       	rjmp	.-4      	; 0x932 <UART_u8ReceiveData>
	/*Receive data from UDR receive buffer*/
	return UDR ;
 936:	8c b1       	in	r24, 0x0c	; 12
}
 938:	08 95       	ret

0000093a <UART_vSendstring>:
void UART_vSendstring( char *ptr)
{
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	ec 01       	movw	r28, r24
	while(*ptr!=0)
 940:	88 81       	ld	r24, Y
 942:	88 23       	and	r24, r24
 944:	61 f0       	breq	.+24     	; 0x95e <UART_vSendstring+0x24>
	/*Wait for UDR receive buffer to be filled with data*/
	while(READ_BIT(UCSRA,RXC)==0);
	/*Receive data from UDR receive buffer*/
	return UDR ;
}
void UART_vSendstring( char *ptr)
 946:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr!=0)
	{
		UART_vSendData(*ptr);
 948:	0e 94 95 04 	call	0x92a	; 0x92a <UART_vSendData>
 94c:	87 ea       	ldi	r24, 0xA7	; 167
 94e:	91 e6       	ldi	r25, 0x61	; 97
 950:	01 97       	sbiw	r24, 0x01	; 1
 952:	f1 f7       	brne	.-4      	; 0x950 <UART_vSendstring+0x16>
 954:	00 c0       	rjmp	.+0      	; 0x956 <UART_vSendstring+0x1c>
 956:	00 00       	nop
	/*Receive data from UDR receive buffer*/
	return UDR ;
}
void UART_vSendstring( char *ptr)
{
	while(*ptr!=0)
 958:	89 91       	ld	r24, Y+
 95a:	88 23       	and	r24, r24
 95c:	a9 f7       	brne	.-22     	; 0x948 <UART_vSendstring+0xe>
	{
		UART_vSendData(*ptr);
		ptr++;
		_delay_ms(100);
	}
}
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	08 95       	ret

00000964 <__subsf3>:
 964:	50 58       	subi	r21, 0x80	; 128

00000966 <__addsf3>:
 966:	bb 27       	eor	r27, r27
 968:	aa 27       	eor	r26, r26
 96a:	0e d0       	rcall	.+28     	; 0x988 <__addsf3x>
 96c:	48 c1       	rjmp	.+656    	; 0xbfe <__fp_round>
 96e:	39 d1       	rcall	.+626    	; 0xbe2 <__fp_pscA>
 970:	30 f0       	brcs	.+12     	; 0x97e <__addsf3+0x18>
 972:	3e d1       	rcall	.+636    	; 0xbf0 <__fp_pscB>
 974:	20 f0       	brcs	.+8      	; 0x97e <__addsf3+0x18>
 976:	31 f4       	brne	.+12     	; 0x984 <__addsf3+0x1e>
 978:	9f 3f       	cpi	r25, 0xFF	; 255
 97a:	11 f4       	brne	.+4      	; 0x980 <__addsf3+0x1a>
 97c:	1e f4       	brtc	.+6      	; 0x984 <__addsf3+0x1e>
 97e:	2e c1       	rjmp	.+604    	; 0xbdc <__fp_nan>
 980:	0e f4       	brtc	.+2      	; 0x984 <__addsf3+0x1e>
 982:	e0 95       	com	r30
 984:	e7 fb       	bst	r30, 7
 986:	24 c1       	rjmp	.+584    	; 0xbd0 <__fp_inf>

00000988 <__addsf3x>:
 988:	e9 2f       	mov	r30, r25
 98a:	4a d1       	rcall	.+660    	; 0xc20 <__fp_split3>
 98c:	80 f3       	brcs	.-32     	; 0x96e <__addsf3+0x8>
 98e:	ba 17       	cp	r27, r26
 990:	62 07       	cpc	r22, r18
 992:	73 07       	cpc	r23, r19
 994:	84 07       	cpc	r24, r20
 996:	95 07       	cpc	r25, r21
 998:	18 f0       	brcs	.+6      	; 0x9a0 <__addsf3x+0x18>
 99a:	71 f4       	brne	.+28     	; 0x9b8 <__addsf3x+0x30>
 99c:	9e f5       	brtc	.+102    	; 0xa04 <__addsf3x+0x7c>
 99e:	62 c1       	rjmp	.+708    	; 0xc64 <__fp_zero>
 9a0:	0e f4       	brtc	.+2      	; 0x9a4 <__addsf3x+0x1c>
 9a2:	e0 95       	com	r30
 9a4:	0b 2e       	mov	r0, r27
 9a6:	ba 2f       	mov	r27, r26
 9a8:	a0 2d       	mov	r26, r0
 9aa:	0b 01       	movw	r0, r22
 9ac:	b9 01       	movw	r22, r18
 9ae:	90 01       	movw	r18, r0
 9b0:	0c 01       	movw	r0, r24
 9b2:	ca 01       	movw	r24, r20
 9b4:	a0 01       	movw	r20, r0
 9b6:	11 24       	eor	r1, r1
 9b8:	ff 27       	eor	r31, r31
 9ba:	59 1b       	sub	r21, r25
 9bc:	99 f0       	breq	.+38     	; 0x9e4 <__addsf3x+0x5c>
 9be:	59 3f       	cpi	r21, 0xF9	; 249
 9c0:	50 f4       	brcc	.+20     	; 0x9d6 <__addsf3x+0x4e>
 9c2:	50 3e       	cpi	r21, 0xE0	; 224
 9c4:	68 f1       	brcs	.+90     	; 0xa20 <__addsf3x+0x98>
 9c6:	1a 16       	cp	r1, r26
 9c8:	f0 40       	sbci	r31, 0x00	; 0
 9ca:	a2 2f       	mov	r26, r18
 9cc:	23 2f       	mov	r18, r19
 9ce:	34 2f       	mov	r19, r20
 9d0:	44 27       	eor	r20, r20
 9d2:	58 5f       	subi	r21, 0xF8	; 248
 9d4:	f3 cf       	rjmp	.-26     	; 0x9bc <__addsf3x+0x34>
 9d6:	46 95       	lsr	r20
 9d8:	37 95       	ror	r19
 9da:	27 95       	ror	r18
 9dc:	a7 95       	ror	r26
 9de:	f0 40       	sbci	r31, 0x00	; 0
 9e0:	53 95       	inc	r21
 9e2:	c9 f7       	brne	.-14     	; 0x9d6 <__addsf3x+0x4e>
 9e4:	7e f4       	brtc	.+30     	; 0xa04 <__addsf3x+0x7c>
 9e6:	1f 16       	cp	r1, r31
 9e8:	ba 0b       	sbc	r27, r26
 9ea:	62 0b       	sbc	r22, r18
 9ec:	73 0b       	sbc	r23, r19
 9ee:	84 0b       	sbc	r24, r20
 9f0:	ba f0       	brmi	.+46     	; 0xa20 <__addsf3x+0x98>
 9f2:	91 50       	subi	r25, 0x01	; 1
 9f4:	a1 f0       	breq	.+40     	; 0xa1e <__addsf3x+0x96>
 9f6:	ff 0f       	add	r31, r31
 9f8:	bb 1f       	adc	r27, r27
 9fa:	66 1f       	adc	r22, r22
 9fc:	77 1f       	adc	r23, r23
 9fe:	88 1f       	adc	r24, r24
 a00:	c2 f7       	brpl	.-16     	; 0x9f2 <__addsf3x+0x6a>
 a02:	0e c0       	rjmp	.+28     	; 0xa20 <__addsf3x+0x98>
 a04:	ba 0f       	add	r27, r26
 a06:	62 1f       	adc	r22, r18
 a08:	73 1f       	adc	r23, r19
 a0a:	84 1f       	adc	r24, r20
 a0c:	48 f4       	brcc	.+18     	; 0xa20 <__addsf3x+0x98>
 a0e:	87 95       	ror	r24
 a10:	77 95       	ror	r23
 a12:	67 95       	ror	r22
 a14:	b7 95       	ror	r27
 a16:	f7 95       	ror	r31
 a18:	9e 3f       	cpi	r25, 0xFE	; 254
 a1a:	08 f0       	brcs	.+2      	; 0xa1e <__addsf3x+0x96>
 a1c:	b3 cf       	rjmp	.-154    	; 0x984 <__addsf3+0x1e>
 a1e:	93 95       	inc	r25
 a20:	88 0f       	add	r24, r24
 a22:	08 f0       	brcs	.+2      	; 0xa26 <__addsf3x+0x9e>
 a24:	99 27       	eor	r25, r25
 a26:	ee 0f       	add	r30, r30
 a28:	97 95       	ror	r25
 a2a:	87 95       	ror	r24
 a2c:	08 95       	ret

00000a2e <__divsf3>:
 a2e:	0c d0       	rcall	.+24     	; 0xa48 <__divsf3x>
 a30:	e6 c0       	rjmp	.+460    	; 0xbfe <__fp_round>
 a32:	de d0       	rcall	.+444    	; 0xbf0 <__fp_pscB>
 a34:	40 f0       	brcs	.+16     	; 0xa46 <__divsf3+0x18>
 a36:	d5 d0       	rcall	.+426    	; 0xbe2 <__fp_pscA>
 a38:	30 f0       	brcs	.+12     	; 0xa46 <__divsf3+0x18>
 a3a:	21 f4       	brne	.+8      	; 0xa44 <__divsf3+0x16>
 a3c:	5f 3f       	cpi	r21, 0xFF	; 255
 a3e:	19 f0       	breq	.+6      	; 0xa46 <__divsf3+0x18>
 a40:	c7 c0       	rjmp	.+398    	; 0xbd0 <__fp_inf>
 a42:	51 11       	cpse	r21, r1
 a44:	10 c1       	rjmp	.+544    	; 0xc66 <__fp_szero>
 a46:	ca c0       	rjmp	.+404    	; 0xbdc <__fp_nan>

00000a48 <__divsf3x>:
 a48:	eb d0       	rcall	.+470    	; 0xc20 <__fp_split3>
 a4a:	98 f3       	brcs	.-26     	; 0xa32 <__divsf3+0x4>

00000a4c <__divsf3_pse>:
 a4c:	99 23       	and	r25, r25
 a4e:	c9 f3       	breq	.-14     	; 0xa42 <__divsf3+0x14>
 a50:	55 23       	and	r21, r21
 a52:	b1 f3       	breq	.-20     	; 0xa40 <__divsf3+0x12>
 a54:	95 1b       	sub	r25, r21
 a56:	55 0b       	sbc	r21, r21
 a58:	bb 27       	eor	r27, r27
 a5a:	aa 27       	eor	r26, r26
 a5c:	62 17       	cp	r22, r18
 a5e:	73 07       	cpc	r23, r19
 a60:	84 07       	cpc	r24, r20
 a62:	38 f0       	brcs	.+14     	; 0xa72 <__divsf3_pse+0x26>
 a64:	9f 5f       	subi	r25, 0xFF	; 255
 a66:	5f 4f       	sbci	r21, 0xFF	; 255
 a68:	22 0f       	add	r18, r18
 a6a:	33 1f       	adc	r19, r19
 a6c:	44 1f       	adc	r20, r20
 a6e:	aa 1f       	adc	r26, r26
 a70:	a9 f3       	breq	.-22     	; 0xa5c <__divsf3_pse+0x10>
 a72:	33 d0       	rcall	.+102    	; 0xada <__divsf3_pse+0x8e>
 a74:	0e 2e       	mov	r0, r30
 a76:	3a f0       	brmi	.+14     	; 0xa86 <__divsf3_pse+0x3a>
 a78:	e0 e8       	ldi	r30, 0x80	; 128
 a7a:	30 d0       	rcall	.+96     	; 0xadc <__divsf3_pse+0x90>
 a7c:	91 50       	subi	r25, 0x01	; 1
 a7e:	50 40       	sbci	r21, 0x00	; 0
 a80:	e6 95       	lsr	r30
 a82:	00 1c       	adc	r0, r0
 a84:	ca f7       	brpl	.-14     	; 0xa78 <__divsf3_pse+0x2c>
 a86:	29 d0       	rcall	.+82     	; 0xada <__divsf3_pse+0x8e>
 a88:	fe 2f       	mov	r31, r30
 a8a:	27 d0       	rcall	.+78     	; 0xada <__divsf3_pse+0x8e>
 a8c:	66 0f       	add	r22, r22
 a8e:	77 1f       	adc	r23, r23
 a90:	88 1f       	adc	r24, r24
 a92:	bb 1f       	adc	r27, r27
 a94:	26 17       	cp	r18, r22
 a96:	37 07       	cpc	r19, r23
 a98:	48 07       	cpc	r20, r24
 a9a:	ab 07       	cpc	r26, r27
 a9c:	b0 e8       	ldi	r27, 0x80	; 128
 a9e:	09 f0       	breq	.+2      	; 0xaa2 <__divsf3_pse+0x56>
 aa0:	bb 0b       	sbc	r27, r27
 aa2:	80 2d       	mov	r24, r0
 aa4:	bf 01       	movw	r22, r30
 aa6:	ff 27       	eor	r31, r31
 aa8:	93 58       	subi	r25, 0x83	; 131
 aaa:	5f 4f       	sbci	r21, 0xFF	; 255
 aac:	2a f0       	brmi	.+10     	; 0xab8 <__divsf3_pse+0x6c>
 aae:	9e 3f       	cpi	r25, 0xFE	; 254
 ab0:	51 05       	cpc	r21, r1
 ab2:	68 f0       	brcs	.+26     	; 0xace <__divsf3_pse+0x82>
 ab4:	8d c0       	rjmp	.+282    	; 0xbd0 <__fp_inf>
 ab6:	d7 c0       	rjmp	.+430    	; 0xc66 <__fp_szero>
 ab8:	5f 3f       	cpi	r21, 0xFF	; 255
 aba:	ec f3       	brlt	.-6      	; 0xab6 <__divsf3_pse+0x6a>
 abc:	98 3e       	cpi	r25, 0xE8	; 232
 abe:	dc f3       	brlt	.-10     	; 0xab6 <__divsf3_pse+0x6a>
 ac0:	86 95       	lsr	r24
 ac2:	77 95       	ror	r23
 ac4:	67 95       	ror	r22
 ac6:	b7 95       	ror	r27
 ac8:	f7 95       	ror	r31
 aca:	9f 5f       	subi	r25, 0xFF	; 255
 acc:	c9 f7       	brne	.-14     	; 0xac0 <__divsf3_pse+0x74>
 ace:	88 0f       	add	r24, r24
 ad0:	91 1d       	adc	r25, r1
 ad2:	96 95       	lsr	r25
 ad4:	87 95       	ror	r24
 ad6:	97 f9       	bld	r25, 7
 ad8:	08 95       	ret
 ada:	e1 e0       	ldi	r30, 0x01	; 1
 adc:	66 0f       	add	r22, r22
 ade:	77 1f       	adc	r23, r23
 ae0:	88 1f       	adc	r24, r24
 ae2:	bb 1f       	adc	r27, r27
 ae4:	62 17       	cp	r22, r18
 ae6:	73 07       	cpc	r23, r19
 ae8:	84 07       	cpc	r24, r20
 aea:	ba 07       	cpc	r27, r26
 aec:	20 f0       	brcs	.+8      	; 0xaf6 <__divsf3_pse+0xaa>
 aee:	62 1b       	sub	r22, r18
 af0:	73 0b       	sbc	r23, r19
 af2:	84 0b       	sbc	r24, r20
 af4:	ba 0b       	sbc	r27, r26
 af6:	ee 1f       	adc	r30, r30
 af8:	88 f7       	brcc	.-30     	; 0xadc <__divsf3_pse+0x90>
 afa:	e0 95       	com	r30
 afc:	08 95       	ret

00000afe <__fixunssfsi>:
 afe:	98 d0       	rcall	.+304    	; 0xc30 <__fp_splitA>
 b00:	88 f0       	brcs	.+34     	; 0xb24 <__fixunssfsi+0x26>
 b02:	9f 57       	subi	r25, 0x7F	; 127
 b04:	90 f0       	brcs	.+36     	; 0xb2a <__fixunssfsi+0x2c>
 b06:	b9 2f       	mov	r27, r25
 b08:	99 27       	eor	r25, r25
 b0a:	b7 51       	subi	r27, 0x17	; 23
 b0c:	a0 f0       	brcs	.+40     	; 0xb36 <__fixunssfsi+0x38>
 b0e:	d1 f0       	breq	.+52     	; 0xb44 <__fixunssfsi+0x46>
 b10:	66 0f       	add	r22, r22
 b12:	77 1f       	adc	r23, r23
 b14:	88 1f       	adc	r24, r24
 b16:	99 1f       	adc	r25, r25
 b18:	1a f0       	brmi	.+6      	; 0xb20 <__fixunssfsi+0x22>
 b1a:	ba 95       	dec	r27
 b1c:	c9 f7       	brne	.-14     	; 0xb10 <__fixunssfsi+0x12>
 b1e:	12 c0       	rjmp	.+36     	; 0xb44 <__fixunssfsi+0x46>
 b20:	b1 30       	cpi	r27, 0x01	; 1
 b22:	81 f0       	breq	.+32     	; 0xb44 <__fixunssfsi+0x46>
 b24:	9f d0       	rcall	.+318    	; 0xc64 <__fp_zero>
 b26:	b1 e0       	ldi	r27, 0x01	; 1
 b28:	08 95       	ret
 b2a:	9c c0       	rjmp	.+312    	; 0xc64 <__fp_zero>
 b2c:	67 2f       	mov	r22, r23
 b2e:	78 2f       	mov	r23, r24
 b30:	88 27       	eor	r24, r24
 b32:	b8 5f       	subi	r27, 0xF8	; 248
 b34:	39 f0       	breq	.+14     	; 0xb44 <__fixunssfsi+0x46>
 b36:	b9 3f       	cpi	r27, 0xF9	; 249
 b38:	cc f3       	brlt	.-14     	; 0xb2c <__fixunssfsi+0x2e>
 b3a:	86 95       	lsr	r24
 b3c:	77 95       	ror	r23
 b3e:	67 95       	ror	r22
 b40:	b3 95       	inc	r27
 b42:	d9 f7       	brne	.-10     	; 0xb3a <__fixunssfsi+0x3c>
 b44:	3e f4       	brtc	.+14     	; 0xb54 <__fixunssfsi+0x56>
 b46:	90 95       	com	r25
 b48:	80 95       	com	r24
 b4a:	70 95       	com	r23
 b4c:	61 95       	neg	r22
 b4e:	7f 4f       	sbci	r23, 0xFF	; 255
 b50:	8f 4f       	sbci	r24, 0xFF	; 255
 b52:	9f 4f       	sbci	r25, 0xFF	; 255
 b54:	08 95       	ret

00000b56 <__floatunsisf>:
 b56:	e8 94       	clt
 b58:	09 c0       	rjmp	.+18     	; 0xb6c <__floatsisf+0x12>

00000b5a <__floatsisf>:
 b5a:	97 fb       	bst	r25, 7
 b5c:	3e f4       	brtc	.+14     	; 0xb6c <__floatsisf+0x12>
 b5e:	90 95       	com	r25
 b60:	80 95       	com	r24
 b62:	70 95       	com	r23
 b64:	61 95       	neg	r22
 b66:	7f 4f       	sbci	r23, 0xFF	; 255
 b68:	8f 4f       	sbci	r24, 0xFF	; 255
 b6a:	9f 4f       	sbci	r25, 0xFF	; 255
 b6c:	99 23       	and	r25, r25
 b6e:	a9 f0       	breq	.+42     	; 0xb9a <__floatsisf+0x40>
 b70:	f9 2f       	mov	r31, r25
 b72:	96 e9       	ldi	r25, 0x96	; 150
 b74:	bb 27       	eor	r27, r27
 b76:	93 95       	inc	r25
 b78:	f6 95       	lsr	r31
 b7a:	87 95       	ror	r24
 b7c:	77 95       	ror	r23
 b7e:	67 95       	ror	r22
 b80:	b7 95       	ror	r27
 b82:	f1 11       	cpse	r31, r1
 b84:	f8 cf       	rjmp	.-16     	; 0xb76 <__floatsisf+0x1c>
 b86:	fa f4       	brpl	.+62     	; 0xbc6 <__floatsisf+0x6c>
 b88:	bb 0f       	add	r27, r27
 b8a:	11 f4       	brne	.+4      	; 0xb90 <__floatsisf+0x36>
 b8c:	60 ff       	sbrs	r22, 0
 b8e:	1b c0       	rjmp	.+54     	; 0xbc6 <__floatsisf+0x6c>
 b90:	6f 5f       	subi	r22, 0xFF	; 255
 b92:	7f 4f       	sbci	r23, 0xFF	; 255
 b94:	8f 4f       	sbci	r24, 0xFF	; 255
 b96:	9f 4f       	sbci	r25, 0xFF	; 255
 b98:	16 c0       	rjmp	.+44     	; 0xbc6 <__floatsisf+0x6c>
 b9a:	88 23       	and	r24, r24
 b9c:	11 f0       	breq	.+4      	; 0xba2 <__floatsisf+0x48>
 b9e:	96 e9       	ldi	r25, 0x96	; 150
 ba0:	11 c0       	rjmp	.+34     	; 0xbc4 <__floatsisf+0x6a>
 ba2:	77 23       	and	r23, r23
 ba4:	21 f0       	breq	.+8      	; 0xbae <__floatsisf+0x54>
 ba6:	9e e8       	ldi	r25, 0x8E	; 142
 ba8:	87 2f       	mov	r24, r23
 baa:	76 2f       	mov	r23, r22
 bac:	05 c0       	rjmp	.+10     	; 0xbb8 <__floatsisf+0x5e>
 bae:	66 23       	and	r22, r22
 bb0:	71 f0       	breq	.+28     	; 0xbce <__floatsisf+0x74>
 bb2:	96 e8       	ldi	r25, 0x86	; 134
 bb4:	86 2f       	mov	r24, r22
 bb6:	70 e0       	ldi	r23, 0x00	; 0
 bb8:	60 e0       	ldi	r22, 0x00	; 0
 bba:	2a f0       	brmi	.+10     	; 0xbc6 <__floatsisf+0x6c>
 bbc:	9a 95       	dec	r25
 bbe:	66 0f       	add	r22, r22
 bc0:	77 1f       	adc	r23, r23
 bc2:	88 1f       	adc	r24, r24
 bc4:	da f7       	brpl	.-10     	; 0xbbc <__floatsisf+0x62>
 bc6:	88 0f       	add	r24, r24
 bc8:	96 95       	lsr	r25
 bca:	87 95       	ror	r24
 bcc:	97 f9       	bld	r25, 7
 bce:	08 95       	ret

00000bd0 <__fp_inf>:
 bd0:	97 f9       	bld	r25, 7
 bd2:	9f 67       	ori	r25, 0x7F	; 127
 bd4:	80 e8       	ldi	r24, 0x80	; 128
 bd6:	70 e0       	ldi	r23, 0x00	; 0
 bd8:	60 e0       	ldi	r22, 0x00	; 0
 bda:	08 95       	ret

00000bdc <__fp_nan>:
 bdc:	9f ef       	ldi	r25, 0xFF	; 255
 bde:	80 ec       	ldi	r24, 0xC0	; 192
 be0:	08 95       	ret

00000be2 <__fp_pscA>:
 be2:	00 24       	eor	r0, r0
 be4:	0a 94       	dec	r0
 be6:	16 16       	cp	r1, r22
 be8:	17 06       	cpc	r1, r23
 bea:	18 06       	cpc	r1, r24
 bec:	09 06       	cpc	r0, r25
 bee:	08 95       	ret

00000bf0 <__fp_pscB>:
 bf0:	00 24       	eor	r0, r0
 bf2:	0a 94       	dec	r0
 bf4:	12 16       	cp	r1, r18
 bf6:	13 06       	cpc	r1, r19
 bf8:	14 06       	cpc	r1, r20
 bfa:	05 06       	cpc	r0, r21
 bfc:	08 95       	ret

00000bfe <__fp_round>:
 bfe:	09 2e       	mov	r0, r25
 c00:	03 94       	inc	r0
 c02:	00 0c       	add	r0, r0
 c04:	11 f4       	brne	.+4      	; 0xc0a <__fp_round+0xc>
 c06:	88 23       	and	r24, r24
 c08:	52 f0       	brmi	.+20     	; 0xc1e <__fp_round+0x20>
 c0a:	bb 0f       	add	r27, r27
 c0c:	40 f4       	brcc	.+16     	; 0xc1e <__fp_round+0x20>
 c0e:	bf 2b       	or	r27, r31
 c10:	11 f4       	brne	.+4      	; 0xc16 <__fp_round+0x18>
 c12:	60 ff       	sbrs	r22, 0
 c14:	04 c0       	rjmp	.+8      	; 0xc1e <__fp_round+0x20>
 c16:	6f 5f       	subi	r22, 0xFF	; 255
 c18:	7f 4f       	sbci	r23, 0xFF	; 255
 c1a:	8f 4f       	sbci	r24, 0xFF	; 255
 c1c:	9f 4f       	sbci	r25, 0xFF	; 255
 c1e:	08 95       	ret

00000c20 <__fp_split3>:
 c20:	57 fd       	sbrc	r21, 7
 c22:	90 58       	subi	r25, 0x80	; 128
 c24:	44 0f       	add	r20, r20
 c26:	55 1f       	adc	r21, r21
 c28:	59 f0       	breq	.+22     	; 0xc40 <__fp_splitA+0x10>
 c2a:	5f 3f       	cpi	r21, 0xFF	; 255
 c2c:	71 f0       	breq	.+28     	; 0xc4a <__fp_splitA+0x1a>
 c2e:	47 95       	ror	r20

00000c30 <__fp_splitA>:
 c30:	88 0f       	add	r24, r24
 c32:	97 fb       	bst	r25, 7
 c34:	99 1f       	adc	r25, r25
 c36:	61 f0       	breq	.+24     	; 0xc50 <__fp_splitA+0x20>
 c38:	9f 3f       	cpi	r25, 0xFF	; 255
 c3a:	79 f0       	breq	.+30     	; 0xc5a <__fp_splitA+0x2a>
 c3c:	87 95       	ror	r24
 c3e:	08 95       	ret
 c40:	12 16       	cp	r1, r18
 c42:	13 06       	cpc	r1, r19
 c44:	14 06       	cpc	r1, r20
 c46:	55 1f       	adc	r21, r21
 c48:	f2 cf       	rjmp	.-28     	; 0xc2e <__fp_split3+0xe>
 c4a:	46 95       	lsr	r20
 c4c:	f1 df       	rcall	.-30     	; 0xc30 <__fp_splitA>
 c4e:	08 c0       	rjmp	.+16     	; 0xc60 <__fp_splitA+0x30>
 c50:	16 16       	cp	r1, r22
 c52:	17 06       	cpc	r1, r23
 c54:	18 06       	cpc	r1, r24
 c56:	99 1f       	adc	r25, r25
 c58:	f1 cf       	rjmp	.-30     	; 0xc3c <__fp_splitA+0xc>
 c5a:	86 95       	lsr	r24
 c5c:	71 05       	cpc	r23, r1
 c5e:	61 05       	cpc	r22, r1
 c60:	08 94       	sec
 c62:	08 95       	ret

00000c64 <__fp_zero>:
 c64:	e8 94       	clt

00000c66 <__fp_szero>:
 c66:	bb 27       	eor	r27, r27
 c68:	66 27       	eor	r22, r22
 c6a:	77 27       	eor	r23, r23
 c6c:	cb 01       	movw	r24, r22
 c6e:	97 f9       	bld	r25, 7
 c70:	08 95       	ret

00000c72 <__mulsf3>:
 c72:	0b d0       	rcall	.+22     	; 0xc8a <__mulsf3x>
 c74:	c4 cf       	rjmp	.-120    	; 0xbfe <__fp_round>
 c76:	b5 df       	rcall	.-150    	; 0xbe2 <__fp_pscA>
 c78:	28 f0       	brcs	.+10     	; 0xc84 <__mulsf3+0x12>
 c7a:	ba df       	rcall	.-140    	; 0xbf0 <__fp_pscB>
 c7c:	18 f0       	brcs	.+6      	; 0xc84 <__mulsf3+0x12>
 c7e:	95 23       	and	r25, r21
 c80:	09 f0       	breq	.+2      	; 0xc84 <__mulsf3+0x12>
 c82:	a6 cf       	rjmp	.-180    	; 0xbd0 <__fp_inf>
 c84:	ab cf       	rjmp	.-170    	; 0xbdc <__fp_nan>
 c86:	11 24       	eor	r1, r1
 c88:	ee cf       	rjmp	.-36     	; 0xc66 <__fp_szero>

00000c8a <__mulsf3x>:
 c8a:	ca df       	rcall	.-108    	; 0xc20 <__fp_split3>
 c8c:	a0 f3       	brcs	.-24     	; 0xc76 <__mulsf3+0x4>

00000c8e <__mulsf3_pse>:
 c8e:	95 9f       	mul	r25, r21
 c90:	d1 f3       	breq	.-12     	; 0xc86 <__mulsf3+0x14>
 c92:	95 0f       	add	r25, r21
 c94:	50 e0       	ldi	r21, 0x00	; 0
 c96:	55 1f       	adc	r21, r21
 c98:	62 9f       	mul	r22, r18
 c9a:	f0 01       	movw	r30, r0
 c9c:	72 9f       	mul	r23, r18
 c9e:	bb 27       	eor	r27, r27
 ca0:	f0 0d       	add	r31, r0
 ca2:	b1 1d       	adc	r27, r1
 ca4:	63 9f       	mul	r22, r19
 ca6:	aa 27       	eor	r26, r26
 ca8:	f0 0d       	add	r31, r0
 caa:	b1 1d       	adc	r27, r1
 cac:	aa 1f       	adc	r26, r26
 cae:	64 9f       	mul	r22, r20
 cb0:	66 27       	eor	r22, r22
 cb2:	b0 0d       	add	r27, r0
 cb4:	a1 1d       	adc	r26, r1
 cb6:	66 1f       	adc	r22, r22
 cb8:	82 9f       	mul	r24, r18
 cba:	22 27       	eor	r18, r18
 cbc:	b0 0d       	add	r27, r0
 cbe:	a1 1d       	adc	r26, r1
 cc0:	62 1f       	adc	r22, r18
 cc2:	73 9f       	mul	r23, r19
 cc4:	b0 0d       	add	r27, r0
 cc6:	a1 1d       	adc	r26, r1
 cc8:	62 1f       	adc	r22, r18
 cca:	83 9f       	mul	r24, r19
 ccc:	a0 0d       	add	r26, r0
 cce:	61 1d       	adc	r22, r1
 cd0:	22 1f       	adc	r18, r18
 cd2:	74 9f       	mul	r23, r20
 cd4:	33 27       	eor	r19, r19
 cd6:	a0 0d       	add	r26, r0
 cd8:	61 1d       	adc	r22, r1
 cda:	23 1f       	adc	r18, r19
 cdc:	84 9f       	mul	r24, r20
 cde:	60 0d       	add	r22, r0
 ce0:	21 1d       	adc	r18, r1
 ce2:	82 2f       	mov	r24, r18
 ce4:	76 2f       	mov	r23, r22
 ce6:	6a 2f       	mov	r22, r26
 ce8:	11 24       	eor	r1, r1
 cea:	9f 57       	subi	r25, 0x7F	; 127
 cec:	50 40       	sbci	r21, 0x00	; 0
 cee:	8a f0       	brmi	.+34     	; 0xd12 <__mulsf3_pse+0x84>
 cf0:	e1 f0       	breq	.+56     	; 0xd2a <__mulsf3_pse+0x9c>
 cf2:	88 23       	and	r24, r24
 cf4:	4a f0       	brmi	.+18     	; 0xd08 <__mulsf3_pse+0x7a>
 cf6:	ee 0f       	add	r30, r30
 cf8:	ff 1f       	adc	r31, r31
 cfa:	bb 1f       	adc	r27, r27
 cfc:	66 1f       	adc	r22, r22
 cfe:	77 1f       	adc	r23, r23
 d00:	88 1f       	adc	r24, r24
 d02:	91 50       	subi	r25, 0x01	; 1
 d04:	50 40       	sbci	r21, 0x00	; 0
 d06:	a9 f7       	brne	.-22     	; 0xcf2 <__mulsf3_pse+0x64>
 d08:	9e 3f       	cpi	r25, 0xFE	; 254
 d0a:	51 05       	cpc	r21, r1
 d0c:	70 f0       	brcs	.+28     	; 0xd2a <__mulsf3_pse+0x9c>
 d0e:	60 cf       	rjmp	.-320    	; 0xbd0 <__fp_inf>
 d10:	aa cf       	rjmp	.-172    	; 0xc66 <__fp_szero>
 d12:	5f 3f       	cpi	r21, 0xFF	; 255
 d14:	ec f3       	brlt	.-6      	; 0xd10 <__mulsf3_pse+0x82>
 d16:	98 3e       	cpi	r25, 0xE8	; 232
 d18:	dc f3       	brlt	.-10     	; 0xd10 <__mulsf3_pse+0x82>
 d1a:	86 95       	lsr	r24
 d1c:	77 95       	ror	r23
 d1e:	67 95       	ror	r22
 d20:	b7 95       	ror	r27
 d22:	f7 95       	ror	r31
 d24:	e7 95       	ror	r30
 d26:	9f 5f       	subi	r25, 0xFF	; 255
 d28:	c1 f7       	brne	.-16     	; 0xd1a <__mulsf3_pse+0x8c>
 d2a:	fe 2b       	or	r31, r30
 d2c:	88 0f       	add	r24, r24
 d2e:	91 1d       	adc	r25, r1
 d30:	96 95       	lsr	r25
 d32:	87 95       	ror	r24
 d34:	97 f9       	bld	r25, 7
 d36:	08 95       	ret

00000d38 <__udivmodsi4>:
 d38:	a1 e2       	ldi	r26, 0x21	; 33
 d3a:	1a 2e       	mov	r1, r26
 d3c:	aa 1b       	sub	r26, r26
 d3e:	bb 1b       	sub	r27, r27
 d40:	fd 01       	movw	r30, r26
 d42:	0d c0       	rjmp	.+26     	; 0xd5e <__udivmodsi4_ep>

00000d44 <__udivmodsi4_loop>:
 d44:	aa 1f       	adc	r26, r26
 d46:	bb 1f       	adc	r27, r27
 d48:	ee 1f       	adc	r30, r30
 d4a:	ff 1f       	adc	r31, r31
 d4c:	a2 17       	cp	r26, r18
 d4e:	b3 07       	cpc	r27, r19
 d50:	e4 07       	cpc	r30, r20
 d52:	f5 07       	cpc	r31, r21
 d54:	20 f0       	brcs	.+8      	; 0xd5e <__udivmodsi4_ep>
 d56:	a2 1b       	sub	r26, r18
 d58:	b3 0b       	sbc	r27, r19
 d5a:	e4 0b       	sbc	r30, r20
 d5c:	f5 0b       	sbc	r31, r21

00000d5e <__udivmodsi4_ep>:
 d5e:	66 1f       	adc	r22, r22
 d60:	77 1f       	adc	r23, r23
 d62:	88 1f       	adc	r24, r24
 d64:	99 1f       	adc	r25, r25
 d66:	1a 94       	dec	r1
 d68:	69 f7       	brne	.-38     	; 0xd44 <__udivmodsi4_loop>
 d6a:	60 95       	com	r22
 d6c:	70 95       	com	r23
 d6e:	80 95       	com	r24
 d70:	90 95       	com	r25
 d72:	9b 01       	movw	r18, r22
 d74:	ac 01       	movw	r20, r24
 d76:	bd 01       	movw	r22, r26
 d78:	cf 01       	movw	r24, r30
 d7a:	08 95       	ret

00000d7c <_exit>:
 d7c:	f8 94       	cli

00000d7e <__stop_program>:
 d7e:	ff cf       	rjmp	.-2      	; 0xd7e <__stop_program>
